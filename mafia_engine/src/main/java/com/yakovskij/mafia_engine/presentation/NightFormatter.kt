package com.yakovskij.mafia_engine.presentation

import com.yakovskij.mafia_engine.domain.NightEvent
import com.yakovskij.mafia_engine.domain.RoleType

class NightFormatter {
    fun format(events: List<NightEvent>): List<String> {
        if (events.isEmpty()) return listOf("–ù–æ—á—å –ø—Ä–æ—à–ª–∞ —Ç–∏—Ö–æ. –ù–∏ –µ–¥–∏–Ω–æ–≥–æ —à–æ—Ä–æ—Ö–∞.")

        var strings = mutableListOf<String>()

        val kills = mutableListOf<NightEvent.KillAttempt>()
        val saves = mutableListOf<NightEvent.DoctorSaved>()
        val detectives = mutableListOf<NightEvent.DetectiveChecked>()
        val blocks = mutableListOf<NightEvent.SlutBlocked>()
        val maniacKills = mutableListOf<NightEvent.ManiacKill>()
        val fails = mutableListOf<NightEvent.FailedAction>()
        val customs = mutableListOf<NightEvent.Custom>()
        val others = mutableListOf<NightEvent>()

        for (event in events) {
            when (event) {
                is NightEvent.KillAttempt -> kills.add(event)
                is NightEvent.DoctorSaved -> saves.add(event)
                is NightEvent.DetectiveChecked -> detectives.add(event)
                is NightEvent.SlutBlocked -> blocks.add(event)
                is NightEvent.ManiacKill -> maniacKills.add(event)
                is NightEvent.FailedAction -> fails.add(event)
                is NightEvent.Custom -> customs.add(event)
                else -> others.add(event)
            }
        }

        // -- 1. –£–±–∏–π—Å—Ç–≤–∞
        val actualKills = kills.filterNot { it.wasSaved }
        if (actualKills.isNotEmpty()) {
            actualKills.groupBy { it.target }.forEach { target, killAttempts ->
                val attackers = actualKills.filter { it.target == target }
                val attackerGroupings = attackers.groupBy { it.performerGroup }.keys.map { it.title }
                strings.add("–†—É–∫–∞–º–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ ${attackerGroupings.joinToString(", ")}, –±—ã–ª —É–±–∏—Ç ${target.name}.")
            }
        }

        // -- 2. –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —É–±–∏–π—Å—Ç–≤–∞ (–∏–∑-–∑–∞ —Å–ø–∞—Å–µ–Ω–∏—è)
        val failedKills = kills.filter { it.wasSaved }
        if (failedKills.isNotEmpty()) {
            failedKills.groupBy { it.target }.forEach { target, killAttempts ->
                val attackers = failedKills.filter { it.target == target }
                val attackerGroupings = attackers.groupBy { it.performerGroup }.keys.map { it.title }
                strings.add("${attackerGroupings.joinToString(", ")} –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —É–±–∏—Ç—å ${target.name}, –Ω–æ –µ–≥–æ —Å–ø–∞—Å–ª–∏.")
            }
        }

        // -- 3. –°–ø–∞—Å–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç –≤—ã—à–µ)
        val uniqueSaves = saves.filterNot { save -> failedKills.any { it.target == save.target } }
        if (uniqueSaves.isNotEmpty()) {
            uniqueSaves.groupBy { it.target }.forEach { target, saves ->
                val savers = uniqueSaves.filter { it.target == target }.map { it.performer.role?.title }
                strings.add("${savers.joinToString(", ")} –ø—Ä–∏—à—ë–ª –Ω–∞ –ø–æ–º–æ—â—å ${target.name}, –Ω–æ —ç—Ç–æ –æ–∫–∞–∑–∞–ª–æ—Å—å –∑—Ä—è.")
            }
        }

        // -- 4. –†–∞—Å–∫—Ä—ã—Ç–∏—è —Ä–æ–ª–∏ (–î–µ—Ç–µ–∫—Ç–∏–≤)
        val detectiveChecks = detectives.groupBy { it.target }
        if (detectiveChecks.isNotEmpty()) {
            detectiveChecks.forEach { target, check ->
                strings.add("–î–µ—Ç–µ–∫—Ç–∏–≤ –ø—Ä–æ–≤–µ—Ä–∏–ª –Ω–æ—á—å—é –∏–≥—Ä–æ–∫–∞ ${target.name} –∏ —É–∑–Ω–∞–ª –µ–≥–æ —Ä–æ–ª—å - ${target.role?.title}.")
            }
        }

        // -- –ù–µ—É–¥–∞—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        if (fails.isNotEmpty()) {
            for (fail in fails) {
                when (fail.performer.role) {
                    RoleType.DETECTIVE -> strings.add("–î–µ—Ç–µ–∫—Ç–∏–≤ –Ω–µ —Å–º–æ–≥ –≤—ã—è—Å–Ω–∏—Ç—å —Ä–æ–ª—å –∏–≥—Ä–æ–∫–∞ ${fail.target.name}. –ï–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –±—ã–ª–∏ —Å–æ—Ä–≤–∞–Ω—ã.")
                    else -> strings.add("${fail.performer.role?.title} –Ω–µ —Å–º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ—ë –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ ${fail.target.name}. –ï–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –±—ã–ª–∏ —Å–æ—Ä–≤–∞–Ω—ã.")
                }
            }
        }

        // -- –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        customs.forEach { strings.add("üì¢ ${it.description}") }

        return strings
    }
}
